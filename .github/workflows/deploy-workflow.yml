name: GCP Deploy
on: push
#on:
#  push:
#    master

jobs:
  deploy-app-engine:
    name: App Engine
    runs-on: ubuntu-latest
    env:
      working-drectory: ./autoscheduler
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Fill in Postgres credentials
        run: bash fill_credentials.sh ${{ secrets.POSTGRES_USER }} ${{ secrets.POSTGRESS_PASS }}

      - name: Initialize Google Cloud SDK
        uses: zxyle/publish-gae-action@master
        with:
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
          gae_config_path: ./autoscheduler/app.yaml

      - name: Initialize GCP Credentials
        run: |
          # This client-secret.json is converted by GCP_SA_KEY
          gcloud auth activate-service-account ${{ secrets.GCP_SA_EMAIL }} --key-file=client-secret.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
      
      - name: Publish app to Google App Engine
        run: gcloud -q app deploy autoscheduler/app.yaml --promote

  deploy-storage:
    name: Cloud Storage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialize Google Cloud SDK
        uses: zxyle/publish-gae-action@master
        with:
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}
          gae_config_path: ./autoscheduler/app.yaml

      - name: Initialize GCP Credentials
        run: |
          # This client-secret.json is converted by GCP_SA_KEY
          gcloud auth activate-service-account ${{ secrets.GCP_SA_EMAIL }} --key-file=client-secret.json
          gcloud config set project ${{ secrets.PROJECT_ID }}

      - name: Get node.js
        uses: actions/setup-node@v1
      
      - name: npm install
        run: npm install
        working-directory: ./autoscheduler/frontend/src

      - name: npm build
        run: npm run build
        working-directory: ./autoscheduler/frontend/src

        # These don't actually matter, the file just has to exist for collectstatic
      - name: Fill in Postgres credentials
        run: bash fill_credentials.sh user pass

      - name: Get Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: pip install
        run: pip install -r requirements.txt
        working-directory:
          ./autoscheduler/

      - name: Collect static files
        run: |
          export SETTINGS_MODE=prod
          python manage.py collectstatic --no-input
        working-directory: ./autoscheduler

      - name: Deploy to Google Cloud Storage
        run: gsutil -m cp -r . gs://${{ secrets.BUCKET_NAME }}
        working-directory: ./autoscheduler/static
